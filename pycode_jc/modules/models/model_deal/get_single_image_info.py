import copy

use_dict = {
    "filter": {
        "use_brightness": False
    },
    "calculate": {
        "use_angle": True,
        "use_resocre": False,  # 当前性别年龄仅返回515维度，没有返回rescore，rescore全部为0.5
    },
    "info": {
        "age": True,
        "gender": True
    }
}

'''
{
	"image_id": 168, # 图片帧号
	"head_num": 2, # 人头框数量
	"face_num": 1, # 人脸框数量
	"annotations": [
	{ # 人头框详细信息
		"track_id": 3, # 该人头的trackid？
		"face_box": [539, 214, 99, 99], # 人脸框坐标 xywh
		"face_confidence": 0.5,     # 人脸置信度
		"head_box": [559, 172, 115, 144], # 人头框坐标 xywh
		"head_confidence": 0.8229353427886963, # 人头置信度
		"angle": [84.32747650146484, 126.91651153564453, -132.35989379882812], # 姿态角 ，yaw，pitch，roll
		"norm": [0.46287858486175537], # 范数，用于计算图片质量
		"age": 20.752548217773438, # 年龄
		"gender": "男", # 性别
		"ps": [[ 9.9067098e-01  3.6702376e-02 -1.3123988e-01  6.2865063e+01]
  [-3.5620004e-02  9.9758905e-01 -5.9560370e-02  8.0262718e+01]
  [ 1.2873746e-01  6.3679494e-02  9.8958987e-01 -7.6648567e+01]], # 用于绘制3D关键点
		"key_points": array([[ 5.91524170e+02,  5.91818665e+02,  5.92712280e+02,
         5.93606384e+02,  5.94709656e+02,  5.96863342e+02,
         5.99417236e+02,  6.03065247e+02,  6.09329956e+02,
         6.16252075e+02,  6.21501038e+02,  6.25906067e+02,
         6.29699646e+02,  6.31965332e+02,  6.33490295e+02,
         6.34818970e+02,  6.35737732e+02,  5.93993042e+02,
         5.96139893e+02,  5.99027710e+02,  6.01874512e+02,
         6.04535706e+02,  6.16105469e+02,  6.19023438e+02,
         6.22314392e+02,  6.25891174e+02,  6.28820618e+02,
         6.10078979e+02,  6.09592224e+02,  6.09087708e+02,
         6.08878174e+02,  6.05975220e+02,  6.07289551e+02,
         6.09221863e+02,  6.11330017e+02,  6.12980347e+02,
         5.97627258e+02,  5.99302490e+02,  6.02107483e+02,
         6.04732117e+02,  6.02275391e+02,  5.99441345e+02,
         6.16516357e+02,  6.19074097e+02,  6.21950745e+02,
         6.24246033e+02,  6.21839050e+02,  6.18810730e+02,
         6.02444824e+02,  6.04614075e+02,  6.07367188e+02,
         6.08945068e+02,  6.10583191e+02,  6.13629883e+02,
         6.16247009e+02,  6.13477478e+02,  6.11162781e+02,
         6.08814331e+02,  6.06572388e+02,  6.04672607e+02,
         6.03208130e+02,  6.07081970e+02,  6.08977600e+02,
         6.11008057e+02,  6.15684509e+02,  6.10912109e+02,
         6.08924255e+02,  6.07026550e+02],
       [ 3.14808136e+02,  3.20822144e+02,  3.26315369e+02,
         3.31366943e+02,  3.36918274e+02,  3.41600891e+02,
         3.44721130e+02,  3.47377136e+02,  3.49040466e+02,
         3.47765533e+02,  3.45505066e+02,  3.42657654e+02,
         3.38193085e+02,  3.32749573e+02,  3.27754639e+02,
         3.22331390e+02,  3.16319275e+02,  3.09394958e+02,
         3.07601715e+02,  3.07238098e+02,  3.07689545e+02,
         3.08599426e+02,  3.08916962e+02,  3.08163605e+02,
         3.07893066e+02,  3.08477203e+02,  3.10557343e+02,
         3.15139618e+02,  3.18978638e+02,  3.22743988e+02,
         3.25892517e+02,  3.28395782e+02,  3.28751312e+02,
         3.29223969e+02,  3.28895813e+02,  3.28634796e+02,
         3.14192871e+02,  3.13165100e+02,  3.13280182e+02,
         3.14720856e+02,  3.15334595e+02,  3.15291016e+02,
         3.15135437e+02,  3.13841278e+02,  3.13953125e+02,
         3.15167267e+02,  3.16037811e+02,  3.15903290e+02,
         3.35836304e+02,  3.34232574e+02,  3.33056427e+02,
         3.33420074e+02,  3.33187439e+02,  3.34556335e+02,
         3.36324707e+02,  3.37511200e+02,  3.38419586e+02,
         3.38502563e+02,  3.38215698e+02,  3.37171021e+02,
         3.35706573e+02,  3.35190643e+02,  3.35169647e+02,
         3.35357635e+02,  3.36155060e+02,  3.35806641e+02,
         3.35839386e+02,  3.35646057e+02],
       [-3.22931595e+01, -3.19049587e+01, -3.16718960e+01,
        -3.07685375e+01, -2.81176796e+01, -2.30708580e+01,
        -1.67053833e+01, -1.08088388e+01, -8.02170944e+00,
        -9.14673710e+00, -1.38751993e+01, -1.92963581e+01,
        -2.36137199e+01, -2.58194084e+01, -2.64817963e+01,
        -2.64775963e+01, -2.66361675e+01, -1.18100290e+01,
        -7.68814564e+00, -4.64476299e+00, -2.70447493e+00,
        -1.67633927e+00, -2.22324625e-01, -5.69907129e-01,
        -1.75317585e+00, -3.94717717e+00, -7.39679241e+00,
        -5.36268592e-01,  1.94000697e+00,  4.56909800e+00,
         4.99900723e+00, -2.04622746e+00, -5.27848303e-01,
         3.23489368e-01, -1.12828575e-02, -1.15472162e+00,
        -9.39968967e+00, -6.49558067e+00, -6.06391287e+00,
        -6.58087158e+00, -6.27649260e+00, -7.37730980e+00,
        -5.18569946e+00, -4.03525019e+00, -3.70994520e+00,
        -6.04905891e+00, -4.56742477e+00, -4.24478626e+00,
        -5.38534069e+00, -1.66275990e+00,  4.33320105e-01,
         8.23662817e-01,  8.46723437e-01, -5.10445178e-01,
        -3.60389209e+00, -1.25347590e+00, -5.07077038e-01,
        -5.54451525e-01, -1.02652645e+00, -2.32562876e+00,
        -4.93639088e+00, -1.31362867e+00, -5.35342932e-01,
        -8.29822302e-01, -3.41388845e+00, -6.95716858e-01,
        -7.63912439e-01, -1.20308590e+00]], dtype=float32)  # 用于绘制3D关键点
	},{
		"track_id": 3, # 该人头的trackid？
		"face_box": null, # 人脸框坐标 xywh
		"face_confidence": null,     # 人脸置信度
		"head_box": [559, 172, 115, 144], # 人头框坐标 xywh
		"head_confidence": 0.8229353427886963, # 人头置信度
		"angle": null, # 姿态角 
		"norm": null, # 范数，用于计算图片质量
		"age": null, # 年龄
		"gender": null, # 性别
		"ps": null,  # 用于绘制3D关键点
		"key_points": null,  # 用于绘制3D关键点
	}],
	"delete_track_ids": [1, 2], # 已经结束的trackid
}
'''


def get_single_image_info(image_id, face_bbox, head_bbox, track_ids, delete_track_ids, ages, genders, norms, kpts_list,
                          pss, angles):
    face_num = len(face_bbox)
    head_num = len(head_bbox)
    single_img_info_dict = {"image_id": image_id,
                            "face_num": face_num, "head_num": head_num,
                            "annotations": [],
                            "delete_track_ids": delete_track_ids}

    anns_base = {"face_box": None,  # 人脸框坐标 xywh
                 "face_confidence": None,  # 人脸置信度
                 "head_box": None,  # 人头框坐标 xywh
                 "head_confidence": None,  # 人头置信度
                 "track_id": None,  # 该人头的trackid？
                 "angle": None,  # 姿态角
                 "norm": None,  # 范数，用于计算图片质量
                 "age": None,  # 年龄
                 "gender": None,  # 性别
                 "ps": None,  # 用于绘制3D关键点
                 "key_points": None  # 用于绘制3D关键点
                 }

    # 按顺序获取人脸框和人头框的对应关系
    for index in range(head_num):

        anns = copy.deepcopy(anns_base)

        # 人头框
        head_box = head_bbox[index][:4]
        head_box_xywh = [int(head_box[0]), int(head_box[1]),
                         int(head_box[2] - head_box[0]), int(head_box[3] - head_box[1])]
        head_confidence = head_bbox[index][4]

        anns["track_id"] = track_ids[index]
        anns["head_box"] = head_box_xywh
        anns["head_confidence"] = head_confidence

        # 有人脸框添加其他信息
        if index < face_num:

            # 人脸框
            face_box = face_bbox[index][:4]
            face_box_xywh = [int(face_box[0]), int(face_box[1]),
                             int(face_box[2] - face_box[0]), int(face_box[3] - face_box[1])]
            face_confidence = face_bbox[index][4]

            anns["face_box"] = face_box_xywh
            anns["face_confidence"] = face_confidence

            # 姿态角
            anns["angle"] = angles[index]

            # 范数
            anns["norm"] = norms[index]

            # 年龄
            anns["age"] = ages[index]

            # 性别
            anns["gender"] = 'male' if genders[index] > 0.5 else 'female'

            # 3D关键点
            anns["ps"] = pss[index]
            anns["key_points"] = kpts_list[index]

        single_img_info_dict['annotations'].append(anns)

    return single_img_info_dict
