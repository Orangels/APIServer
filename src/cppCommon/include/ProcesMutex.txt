//ProcessMutex.h文件： https://my.oschina.net/u/929521/blog/645678
#ifndef __PROCESS_MUTEX_H__
#define __PROCESS_MUTEX_H__
 
#ifdef WIN32
#include <Windows.h>
#endif
 
#ifdef linux
#include <unistd.h>
#include <semaphore.h>
#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <memory.h>
#endif
 
class CProcessMutex
{
public:
    /* 默认创建匿名的互斥 */
    CProcessMutex(const char* name = NULL);
    ~CProcessMutex();
 
    bool Lock();
    bool UnLock();
private:
#ifdef WIN32
    void* m_pMutex;
#endif
#ifdef linux
    set_t* m_pSem;
#ednif
    char m_cMutexName[30];
};
#endif
 //ProcessMutex.cpp文件：
#include "ProcessMutex.h"
 
#ifdef WIN32
 
CProcessMutex::CProcessMutex(const char* name)
{
    memset(m_cMutexName, 0 ,sizeof(m_cMutexName));
    int min = strlen(name)>(sizeof(m_cMutexName)-1)?(sizeof(m_cMutexName)-1):strlen(name);
    strncpy(m_cMutexName, name, min);
    m_pMutex = CreateMutex(NULL, false, m_cMutexName);
}
 
CProcessMutex::~CProcessMutex()
{
    CloseHandle(m_pMutex);
}
 
bool CProcessMutex::Lock()
{
    //互斥锁创建失败
    if (NULL == m_pMutex)
    {
        return false;
    }
     
    DWORD nRet = WaitForSingleObject(m_pMutex, INFINITE);
    if (nRet != WAIT_OBJECT_0)
    {
        return false;
    }
 
    return true;
}
 
bool CProcessMutex::UnLock()
{
    return ReleaseMutex(m_pMutex);
}
 
#endif
 
#ifdef linux
 
CProcessMutex::CProcessMutex(const char* name)
{
    memset(m_cMutexName, 0 ,sizeof(m_cMutexName));
    int min = strlen(name)>(sizeof(m_cMutexName)-1)?(sizeof(m_cMutexName)-1):strlen(name);
    strncpy(m_cMutexName, name, min);
    m_pSem = sem_open(name, O_CREAT, 0644, 1);
}
 
CProcessMutex::~CProcessMutex()
{
    int ret = sem_close(m_pSem);
    if (0 != ret)
    {
        printf("sem_close error %d\n", ret);
    }
    sem_unlink(m_cMutexName);
}
 
bool CProcessMutex::Lock()
{
    int ret = sem_wait(m_pSem);
    if (ret != 0)
    {
        return false;
    }
    return true;
}
 
bool CProcessMutex::UnLock()
{
    int ret = sem_post(m_pSem);
    if (ret != 0)
    {
        return false;
    }
    return true;
}
 
#endif
//使用方式
CProcessMutex pMutex("MutexName");

pMutex.Lock();


//互斥内容或者函数

pMutex.UnLock()





//进程间共享内存
#include <sys/shm.h>
#define IPCKEY 0x366378
int shm_id = shmget(IPCKEY, 1028, 0640);
//int shm_id = shmget(IPCKEY, 1028, 0640 | IPC_CREAT | IPC_EXCL);
volatile char* psh = (char*)shmat(shm_id, NULL, 0);

if (shmctl(shm_id, IPC_RMID, NULL) == -1)
{
    perror(" delete error ");
}
else std::cout << "delete ok!" << std::endl;

