// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: postPara3DKeyPoints.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_postPara3DKeyPoints_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_postPara3DKeyPoints_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_postPara3DKeyPoints_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_postPara3DKeyPoints_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_postPara3DKeyPoints_2eproto;
class C3DPara;
class C3DParaDefaultTypeInternal;
extern C3DParaDefaultTypeInternal _C3DPara_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::C3DPara* Arena::CreateMaybeMessage<::C3DPara>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class C3DPara :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C3DPara) */ {
 public:
  C3DPara();
  virtual ~C3DPara();

  C3DPara(const C3DPara& from);
  C3DPara(C3DPara&& from) noexcept
    : C3DPara() {
    *this = ::std::move(from);
  }

  inline C3DPara& operator=(const C3DPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline C3DPara& operator=(C3DPara&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C3DPara& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C3DPara* internal_default_instance() {
    return reinterpret_cast<const C3DPara*>(
               &_C3DPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C3DPara& a, C3DPara& b) {
    a.Swap(&b);
  }
  inline void Swap(C3DPara* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C3DPara* New() const final {
    return CreateMaybeMessage<C3DPara>(nullptr);
  }

  C3DPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C3DPara>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C3DPara& from);
  void MergeFrom(const C3DPara& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C3DPara* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C3DPara";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_postPara3DKeyPoints_2eproto);
    return ::descriptor_table_postPara3DKeyPoints_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWShpBaseFieldNumber = 1,
    kWExpBaseFieldNumber = 2,
  };
  // repeated float wShpBase = 1;
  int wshpbase_size() const;
  private:
  int _internal_wshpbase_size() const;
  public:
  void clear_wshpbase();
  private:
  float _internal_wshpbase(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_wshpbase() const;
  void _internal_add_wshpbase(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_wshpbase();
  public:
  float wshpbase(int index) const;
  void set_wshpbase(int index, float value);
  void add_wshpbase(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      wshpbase() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_wshpbase();

  // repeated float wExpBase = 2;
  int wexpbase_size() const;
  private:
  int _internal_wexpbase_size() const;
  public:
  void clear_wexpbase();
  private:
  float _internal_wexpbase(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_wexpbase() const;
  void _internal_add_wexpbase(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_wexpbase();
  public:
  float wexpbase(int index) const;
  void set_wexpbase(int index, float value);
  void add_wexpbase(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      wexpbase() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_wexpbase();

  // @@protoc_insertion_point(class_scope:C3DPara)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > wshpbase_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > wexpbase_;
  friend struct ::TableStruct_postPara3DKeyPoints_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C3DPara

// repeated float wShpBase = 1;
inline int C3DPara::_internal_wshpbase_size() const {
  return wshpbase_.size();
}
inline int C3DPara::wshpbase_size() const {
  return _internal_wshpbase_size();
}
inline void C3DPara::clear_wshpbase() {
  wshpbase_.Clear();
}
inline float C3DPara::_internal_wshpbase(int index) const {
  return wshpbase_.Get(index);
}
inline float C3DPara::wshpbase(int index) const {
  // @@protoc_insertion_point(field_get:C3DPara.wShpBase)
  return _internal_wshpbase(index);
}
inline void C3DPara::set_wshpbase(int index, float value) {
  wshpbase_.Set(index, value);
  // @@protoc_insertion_point(field_set:C3DPara.wShpBase)
}
inline void C3DPara::_internal_add_wshpbase(float value) {
  wshpbase_.Add(value);
}
inline void C3DPara::add_wshpbase(float value) {
  _internal_add_wshpbase(value);
  // @@protoc_insertion_point(field_add:C3DPara.wShpBase)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
C3DPara::_internal_wshpbase() const {
  return wshpbase_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
C3DPara::wshpbase() const {
  // @@protoc_insertion_point(field_list:C3DPara.wShpBase)
  return _internal_wshpbase();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
C3DPara::_internal_mutable_wshpbase() {
  return &wshpbase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
C3DPara::mutable_wshpbase() {
  // @@protoc_insertion_point(field_mutable_list:C3DPara.wShpBase)
  return _internal_mutable_wshpbase();
}

// repeated float wExpBase = 2;
inline int C3DPara::_internal_wexpbase_size() const {
  return wexpbase_.size();
}
inline int C3DPara::wexpbase_size() const {
  return _internal_wexpbase_size();
}
inline void C3DPara::clear_wexpbase() {
  wexpbase_.Clear();
}
inline float C3DPara::_internal_wexpbase(int index) const {
  return wexpbase_.Get(index);
}
inline float C3DPara::wexpbase(int index) const {
  // @@protoc_insertion_point(field_get:C3DPara.wExpBase)
  return _internal_wexpbase(index);
}
inline void C3DPara::set_wexpbase(int index, float value) {
  wexpbase_.Set(index, value);
  // @@protoc_insertion_point(field_set:C3DPara.wExpBase)
}
inline void C3DPara::_internal_add_wexpbase(float value) {
  wexpbase_.Add(value);
}
inline void C3DPara::add_wexpbase(float value) {
  _internal_add_wexpbase(value);
  // @@protoc_insertion_point(field_add:C3DPara.wExpBase)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
C3DPara::_internal_wexpbase() const {
  return wexpbase_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
C3DPara::wexpbase() const {
  // @@protoc_insertion_point(field_list:C3DPara.wExpBase)
  return _internal_wexpbase();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
C3DPara::_internal_mutable_wexpbase() {
  return &wexpbase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
C3DPara::mutable_wexpbase() {
  // @@protoc_insertion_point(field_mutable_list:C3DPara.wExpBase)
  return _internal_mutable_wexpbase();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_postPara3DKeyPoints_2eproto
